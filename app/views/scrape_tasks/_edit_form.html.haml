-disable_input = !current_account.types.include?('manager')
=form_with(url: scrape_task_path(@scrape_task), html: { onkeypress: "return event.keyCode !== 13;" }, method: :patch) do |f|
  .row.mb-4.align-items-center
    .col-2.pr-0.text-right.font-weight-bold
      NAME:
    .col-5
      =f.text_field 'scrape_task[name]', class: 'form-control form-control-sm', value: @scrape_task.name,
                                         required: true, disabled: disable_input, readonly: disable_input
  %hr/
  .row.mt-4
    .col-6.border-right
      .row.mb-4
        .col-4.pr-0.text-right.font-weight-bold
          MULTI TASKS:
        .col-8
          -attached_tasks = @scrape_task.multi_tasks
          #includedTasks
            =render partial: 'multi_task', collection: attached_tasks
          #addTask
            =link_to('[ add task ]', new_scrape_task_task_path(@scrape_task), onclick: 'showSpinner()', remote: true)
            .row.loadingSpinner.d-none
              .col-1.text-right
                .spinner-border.spinner-border-sm.text-secondary
                  %span.sr-only
            :javascript
              function showSpinner() {
                document.querySelector('#addTask .loadingSpinner').classList.remove('d-none');
                document.querySelector('#addTask a').classList.add('d-none');
              }

          :javascript
            function addRemoveMarginToTasks() {
              let tasks = document.querySelector('#includedTasks');

              if(tasks.innerText.trim() === '') {
                tasks.classList.remove('mb-2');
              } else {
                tasks.classList.add('mb-2');
              }
            }
            addRemoveMarginToTasks();

            function multiTaskByEnterPress(event, input) {
              if(event.keyCode !== 13 || input.value.trim().length === 0) return false;

              Rails.ajax({
                type: "POST",
                dataType: 'script',
                url: `#{api_scrape_tasks_tasks_path(@scrape_task)}`,
                data: `multi_task_title=${encodeURIComponent(input.value.replace(/#\d+\s/, ''))}`,
                success: (data) => {
                  if(data['exist']) return false;

                  document.querySelector('#includedTasks').insertAdjacentHTML(
                    'beforeend',
                    `<div class="task-${data['task_id']}">
                       <a onclick="excludeMultiTaskFromScrapeTask(event, ${data['task_id']});" href="#">
                         [ remove ]
                       </a>
                       &nbsp;&nbsp;|&nbsp;&nbsp;
                       <a rel="noopener noreferrer" href="/tasks/${data['task_id']}">\#${data['task_id']} ${data['task_name']}</a>
                       <br/>
                    </div>`
                  );

                  addRemoveMarginToTasks();
                  input.value = '';
                }
              });
            }

            function excludeMultiTaskFromScrapeTask(event, task_id) {
              event.preventDefault();

              Rails.ajax({
                type: "DELETE",
                dataType: 'json',
                url: `/api/scrape_tasks/#{@scrape_task.id}/tasks/${task_id}`,
                success: (data) => {
                  if(data['not_exist']) return false;

                  document.querySelector(`#includedTasks .task-${task_id}`).remove();
                  addRemoveMarginToTasks();
                }
              });
            }

      .row.mb-4.align-items-center
        .col-4.pr-0.text-right.font-weight-bold
          DEADLINE:
        .col-8
          =f.date_field 'scrape_task[deadline]', class: 'form-control form-control-sm w-50',
                        value: @scrape_task.deadline, disabled: disable_input, readonly: disable_input, type: :datetime

      .row.mb-4.align-items-center
        .col-4.pr-0.text-right.font-weight-bold
          STATE:
        .col-8
          =f.collection_select 'scrape_task[state_id]', State.all, :id, :name,
                               { include_blank: true, selected: @scrape_task.state&.id },
                               { class: 'form-control form-control-sm w-50', disabled: disable_input, readonly: disable_input }

      .row.mb-4.align-items-center
        .col-4.pr-0.text-right.font-weight-bold
          SCRAPABLE?:
        .col-8
          =f.radio_button "scrape_task[scrapable]", 1, checked: @scrape_task.scrapable.eql?(1), disabled: disable_input, readonly: disable_input
          =f.label 'yes', class: 'mr-2'
          =f.radio_button "scrape_task[scrapable]", 0, checked: @scrape_task.scrapable.eql?(0), disabled: disable_input, readonly: disable_input
          =f.label 'no'

      .row.mb-4.align-items-center
        .col-4.pr-0.text-right.font-weight-bold
          SCRAPER:
        .col-8
          =f.collection_select 'scrape_task[scraper_id]', Account.joins(:account_types).where(account_types: { name: 'scraper'}).order(:first_name, :last_name), :id, :name,
                               { include_blank: true, selected: @scrape_task.scraper&.id },
                               { class: 'form-control form-control-sm w-50', disabled: disable_input, readonly: disable_input }

      .row.mb-4.align-items-center
        .col-4.pr-0.text-right.font-weight-bold
          SCRAPE FREQUENCY:
        .col-8
          =f.collection_select 'scrape_task[frequency_id]',  Frequency.all, :id, :name,
                               { include_blank: true, selected: @scrape_task.frequency&.id },
                               { class: 'form-control form-control-sm w-50', disabled: disable_input, readonly: disable_input }

      .row.mb-4.align-items-center
        .col-4.pr-0.text-right.font-weight-bold
          URL:
        .col-8
          =f.text_field 'scrape_task[datasource_url]', class: 'form-control form-control-sm w-100', value: @scrape_task.datasource_url

      .row.mb-4
        .col-4.pr-0.text-right.font-weight-bold
          TABLES:
        .col-8
          =form_with do |f|
            =f.collection_select :host, Host.select(:id, :name), :id, :name, { prompt: '' }, { onchange: 'loadSchemas(this)' }
            =f.collection_select :schema, [], :id, :name, { prompt: '' }, { onchange: 'loadTables(this)' }
            =f.collection_select :table_names, [], :id, :name, {}, {}

          :javascript
            function loadSchemas(host) {
              let schema = document.querySelector("#schema");
              let tableNames = document.querySelector('#table_names');

              schema.options.length = 0;
              tableNames.options.length = 0;

              if(host.value === '') return false;

              Rails.ajax({
                type: "GET",
                dataType: 'json',
                url: `#{api_scrape_tasks_schemas_path(@scrape_task)}`,
                data: `host=${encodeURIComponent(host.value)}`,
                success: (data) => {
                  let option = document.createElement("option");

                  schema.innerHTML = '';
                  schema.appendChild(option);

                  data['schemas'].forEach((item) => {
                    option = document.createElement("option");
                    option.setAttribute("value", item['id']);
                    option.text = item['name'];
                    schema.appendChild(option)
                  });
                }
              });
            }

            function loadTables(schema) {
              let host = document.querySelector('#host');
              let tableNames = document.querySelector('#table_names');

              tableNames.options.length = 0;

              if(schema.value === '') return false;

              Rails.ajax({
                type: "GET",
                dataType: 'json',
                url: `#{api_scrape_tasks_table_names_path(@scrape_task)}`,
                data: `host=${encodeURIComponent(host.value)}&schema=${encodeURIComponent(schema.value)}`,
                success: (data) => {
                  console.log(data['table_names'])
                  data['table_names'].forEach((item) => {
                    let option = document.createElement("option");
                    option.setAttribute("value", item);
                    option.text = item;
                    tableNames.appendChild(option)
                  });
                }
              });
            }
      -if !disable_input
        .row.mb-4.align-items-center
          .col-4.pr-0.text-right.font-weight-bold
            DATA SET:
          .col-8
            =f.collection_select 'data_set[id]', DataSet.where('scrape_task_id IS NULL or id = :data_set_id', data_set_id: @scrape_task.data_set).order(:name),
                                 :id, :name, { include_blank: true, selected: @scrape_task.data_set&.id }, { class: 'form-control form-control-sm w-100'}


      .row.mt-4.align-items-center
        .col-12.pt-2.text-center
          =f.submit 'update', class: 'btn btn-sm btn-dark'
          %button{ type: "button", class: "btn btn-sm btn-outline-dark", 'data-dismiss' => "modal" }
            Close
    .col-6
      .font-weight-bold
        COMMENT DATASOURCE:
      =f.text_area 'datasource_comment[body]', class: 'form-control form-control-sm',
                   value: @scrape_task.datasource_comment&.body
      :javascript
        $('textarea[id="datasource_comment[body]"]').froalaEditor({
          key: 'KfdolbcqsaA2wzA-13==',
          editorClass: 'border rounded p-2 w-100 mt-1 mb-5',
          toolbarInline: true,
          toolbarButtons: ['undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikeThrough', '|', 'color', 'lineHeight', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'insertLink', 'insertImage'],
          imageUploadURL: '/images/upload',
          imageUploadMethod: 'POST',
          toolbarVisibleWithoutSelection: false,
          zIndex: 3333,
          height: 91
        })

      .font-weight-bold
        COMMENT ON SCRAPE ABILITY:
      =f.text_area 'scrape_ability_comment[body]', class: 'form-control form-control-sm',
                   value: @scrape_task.scrape_ability_comment&.body
      :javascript
        $('textarea[id="scrape_ability_comment[body]"]').froalaEditor({
          key: 'KfdolbcqsaA2wzA-13==',
          editorClass: 'border rounded p-2 w-100 mt-1 mb-5',
          toolbarInline: true,
          toolbarButtons: ['undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikeThrough', '|', 'color', 'lineHeight', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'insertLink', 'insertImage'],
          imageUploadURL: '/images/upload',
          imageUploadMethod: 'POST',
          toolbarVisibleWithoutSelection: false,
          zIndex: 3333,
          height: 91
        })

      .font-weight-bold
        GENERAL COMMENT:
      =f.text_area 'general_comment[body]', class: 'form-control form-control-sm',
                   rows: 5, value: @scrape_task.general_comment&.body
      :javascript
        $('textarea[id="general_comment[body]"]').froalaEditor({
          key: 'KfdolbcqsaA2wzA-13==',
          editorClass: 'border rounded p-2 w-100 mt-1 mb-5',
          toolbarInline: true,
          toolbarButtons: ['undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikeThrough', '|', 'color', 'lineHeight', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'insertLink', 'insertImage'],
          imageUploadURL: '/images/upload',
          imageUploadMethod: 'POST',
          toolbarVisibleWithoutSelection: false,
          zIndex: 3333,
          height: 91
        })
