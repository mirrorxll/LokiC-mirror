=form_with(url: work_request_path(@work_request), method: :patch, html: { onkeypress: "return event.keyCode !== 13;" } ) do |f|
  .small.pl-3
    #projectOrderNameAnchor.mb-3
    #projectOrderName.card
      .card-body
        .font-weight-bold.mb-2
          Project Order Name (the short way to refer to the project)
          %span.small.text-danger
            *required
        =f.text_field "work_request[project_order_name]", class: 'form-control form-control-sm w-75',
                      value: @work_request.project_order_name.body, maxlength: 2000
        .small.text-secondary
          limit: 2000 symbols



    -##workTypesAnchor
    -##workTypes.card
      .card-body
        .font-weight-bold.mb-2
          Work types
          %span.small.text-danger
            *required
        .types
          -@work_request.work_types.each do |wt|
            .row.mb-2.align-items-center{ class: "work-type-#{wt.id}"}
              .col-1.text-right
                =f.check_box "work_request[tf_work_type__#{wt.id}]", checked: true
              .col-11.pl-0.text-left
                =f.label "work_request[tf_work_type__#{wt.id}]", wt.name, class: 'm-0'
        .row.loadingSpinner.d-none
          .col-1.text-right
            .spinner-border.spinner-border-sm.text-secondary
              %span.sr-only
        .other-types
          Other:
          %input.underline-input.w-80.p-0{ list: 'otherTypesOfWork', onkeypress: 'typeOfWorkByEnterPress(event, this)' }
          %datalist#otherTypesOfWork
            -WorkType.where("work = 1 AND id NOT IN(#{@work_request.work_types.ids.join(',')})").order(:name).each do |wt|
              %option{ value: "#{wt.name}" }
          .sign-in.d-inline-block.ml-1
            .mouse-hover{ onclick: 'typeOfWorkByArrowClick();' }
              =icon('fa', 'sign-in')
          .small.text-secondary
            *** other input: after typing or selecting press enter or click 'Enter' icon on right
      :javascript
        function typeOfWorkByEnterPress(event, input) {
          if(event.keyCode !== 13 || input.value.trim().length === 0) return false;

          postTypeOfWorkIfNotExist(input);
        }

        function typeOfWorkByArrowClick() {
          let input = document.querySelector('#workTypes input.underline-input');

          if(input.value.trim().length === 0) return false;

          postTypeOfWorkIfNotExist(input);
        }

        function postTypeOfWorkIfNotExist(input) {
          let spinner = document.querySelector('#workTypes .loadingSpinner');

          spinner.classList.remove('d-none');

          Rails.ajax({
            type: "POST",
            dataType: 'script',
            url: `#{find_or_create_api_work_types_path}`,
            data: `type_of_work[name]=${encodeURIComponent(input.value)}`,
            success: (data) => {
              input.value = '';
              spinner.classList.add('d-none');

              if(document.querySelector(`.work-type-${data['work_id']}`)) return false;

              document.querySelector('#workTypes .types').insertAdjacentHTML(
                'beforeend',
                `<div class="row mb-2 align-items-center work-type-${data['work_id']}">
                  <div class="col-1 text-right">
                    <input name="work_request[tf_work_type__${data['work_id']}]" type="hidden" value="0">
                    <input type="checkbox" value="1" name="work_request[tf_work_type__${data['work_id']}]" id="work_request[tf_work_type__${data['work_id']}]" checked>
                  </div>
                  <div class="col-11 pl-0 text-left">
                    <label class="m-0" for="work_request[tf_work_type__${data['work_id']}]">${data['work_name']}</label>
                  </div>
                </div>`
              )
            }
          });
        }



    #clientsAnchor.mb-3
    #clients.card
      -clients = @work_request.clients
      .card-body
        .font-weight-bold.mb-2
          Clients
        .list
          -clients.each do |cl|
            .row.mb-2.align-items-center{ class: "client-#{cl.id}"}
              .col-1.text-right
                =f.check_box "work_request[tf_client__#{cl.id}]", checked: true
              .col-11.pl-0.text-left
                =f.label "work_request[tf_client__#{cl.id}]", cl.name, class: 'm-0'
        .row.processingOther.align-items-center.d-none
          .col-1.text-right
            .loadingSpinner.spinner-border.spinner-border-sm.text-secondary
              %span.sr-only
        .other-clients
          Other:
          %input.underline-input.w-50.p-0{ list: 'otherClients', onkeypress: 'clientByEnterPress(event, this)', oninput: 'hideClientNone();' }
          %datalist#otherClients
            -other_client = (clients.present? ? Client.where("id NOT IN (#{clients.ids.join(',')})") : Client.all).order(:name)
            -other_client.each do |cl|
              %option{ value: "#{cl.exist_in_pl ? cl.name : "#{cl.name} (New Client)"}" }

          .sign-in.d-inline-block.ml-1
            .mouse-hover{ onclick: 'clientByArrowClick();' }
              =icon('fa', 'sign-in')
          .small.text-secondary
            *** other input: after typing or selecting press enter or click 'Enter' icon on right
          .small.text-dark
            *** (New Client) - this mark means client doesn't exist in PL
      :javascript
        function clientByEnterPress(event, input) {
          if(event.keyCode !== 13 || input.value.trim().length === 0) return false;

          addClient(input);
        }

        function clientByArrowClick() {
          let input = document.querySelector('#clients input.underline-input');

          if(input.value.trim().length === 0) return false;

          addClient(input);
        }

        function addClient(input) {
          let spinner = document.querySelector('#clients .loadingSpinner');
          let processing = document.querySelector('#clients .processingOther');

          processing.classList.remove('d-none');

          Rails.ajax({
            type: "GET",
            dataType: 'script',
            url: `#{find_api_clients_path}`,
            data: `client[name]=${encodeURIComponent(input.value.replaceAll(/ \(New Client\)/g, ''))}`,
            success: (data) => {
              input.value = '';
              spinner.classList.add('d-none');

              let clientName;

              if(data['exist_in_pl']) {
                clientName = data['client_name'];
              } else {
                clientName = data['client_name'] + ' ' + '(New Client)';
              }

              if(document.querySelector(`.client-${data['client_id']}`)) {
                processing.classList.add('d-none');
                return false;
              }

              if(data['new_record']) {
                document.querySelector('#otherClients').insertAdjacentHTML(
                  'afterbegin',
                  `<option value="${clientName}"></option>`
                )
              }

              document.querySelector('#clients .list').insertAdjacentHTML(
                'beforeend',
                `<div class="row mb-2 align-items-center client-${data['client_id']}">
                  <div class="col-1 text-right">
                    <input name="work_request[tf_client__${data['client_id']}]" type="hidden" value="0">
                    <input type="checkbox" value="1" name="work_request[tf_client__${data['client_id']}]" id="work_request[tf_client__${data['client_id']}]" checked>
                  </div>
                  <div class="col-11 pl-0 text-left">
                    <label class="m-0" for="work_request[tf_client__${data['client_id']}]">${clientName}</label>
                  </div>
                </div>`
              )
            }
          });
        }

        function hideClientNone() {
          document.querySelector('#clients .processingOther').classList.add('d-none');
          document.querySelector('#clients .loadingSpinner').classList.remove('d-none');
        }



    -##underwritingProjectAnchor.mb-3
    -##underwritingProject.card
      -up = @work_request.underwriting_project
      .card-body
        .d-inline-block.font-weight-bold.mb-2
          Underwriting Project
        %a.reset.ml-3{ href: '#', class: "#{up ? '' : ' d-none'}", onclick: 'unselect(event);' } unselect
        .projects
          -if up
            .row.mb-2.align-items-center{ class: "underwriting-project-#{up.id}", oninput: 'showUnselect();'}
              .col-1.text-right
                =f.radio_button "work_request[underwriting_project]", up.id, checked: true
              .col-11.pl-0.text-left
                =f.label "work_request[underwriting_project]", up.name, value: up.id, class: 'm-0'
        .row.loadingSpinner.d-none
          .col-1.text-right
            .spinner-border.spinner-border-sm.text-secondary
              %span.sr-only
        .other-projects
          Other:
          %input.underline-input.w-50.p-0{ list: 'otherProjects', onkeypress: 'projectByEnterPress(event, this)' }
          %datalist#otherProjects
            -UnderwritingProject.where("id #{up ? "!= #{up.id}" : 'IS NOT NULL'}").each do |oup|
              %option{ value: "#{oup.name}" }
          .sign-in.d-inline-block.ml-1
            .mouse-hover{ onclick: 'projectByArrowClick();' }
              =icon('fa', 'sign-in')
          .small.text-secondary
            *** other input: after typing or selecting press enter or click 'Enter' icon on right
      :javascript
        function showUnselect() {
          document.querySelector('#underwritingProject .reset').classList.remove('d-none');
        }

        function unselect(event) {
          event.preventDefault();

          [...document.querySelectorAll('#underwritingProject input[type="radio"]')].forEach((item) => item.checked = false)
          event.target.classList.add('d-none');
        }

        function projectByEnterPress(event, input) {
          if(event.keyCode !== 13 || input.value.trim().length === 0) return false;

          postProjectIfNotExist(input);
        }

        function projectByArrowClick() {
          let input = document.querySelector('#underwritingProject input.underline-input');

          if(input.value.trim().length === 0) return false;

          postProjectIfNotExist(input);
        }

        function postProjectIfNotExist(input) {
          let spinner = document.querySelector('#underwritingProject .loadingSpinner');

          spinner.classList.remove('d-none');

          Rails.ajax({
            type: "POST",
            dataType: 'script',
            url: `#{find_or_create_api_underwriting_projects_path}`,
            data: `project[name]=${encodeURIComponent(input.value)}`,
            success: (data) => {
              input.value = '';
              spinner.classList.add('d-none');

              if(document.querySelector(`.underwriting-project-${data['project_id']}`)) return false;

              document.querySelector('#underwritingProject .projects').insertAdjacentHTML(
                'beforeend',
                `<div class="row mb-2 align-items-center underwriting-project-${data['project_id']}" oninput="showUnselect();">
                  <div class="col-1 text-right">
                    <input type="radio" value="${data['project_id']}" name="work_request[underwriting_project]" id="work_request[underwriting_project]_${data['project_id']}" checked>
                  </div>
                  <div class="col-11 pl-0 text-left">
                    <label class="m-0" for="work_request[underwriting_project]_${data['project_id']}" value="${data['project_id']}">${data['project_name']}</label>
                  </div>
                </div>`
              );

              showUnselect();
            }
          });
        }



    -##revenueTypesAnchor.mb-3
    -##revenueTypes.card
      .card-body
        .font-weight-bold.mb-2
          What Revenue Type is this?
          %span.small.text-danger
            *required
        .types
          -RevenueType.where(hidden: false).each do |rt|
            .row.mb-2.align-items-center{ class: "revenue-type-#{rt.id}"}
              .col-1.text-right
                =f.check_box "work_request[tf_revenue_type__#{rt.id}]", checked: @work_request.revenue_types.exists?(rt.id)
              .col-11.pl-0.text-left
                =f.label "work_request[tf_revenue_type__#{rt.id}]", rt.name, class: 'm-0'



    -if current_account.types.include?('manager')
      #sowAnchor.mb-3
      #sow.card
        .card-body
          .font-weight-bold.mb-2
            SOW
          =f.check_box "work_request[sow[default]]", onchange: 'sowLinkSwitcher(this)',  checked: @work_request.default_sow
          =f.label "work_request[sow[default]]", 'Default (SOW not ready yet)'
          .sow-link{ class: "#{@work_request.default_sow ? 'd-none' : ''}" }
            %span.small.text-danger
              ***link to Google Doc or Spreadsheet
            =f.text_field "work_request[sow[link]]",
                          class: 'form-control form-control-sm w-75', value: @work_request.sow
          .default-sow{ class: "#{@work_request.default_sow ? '' : 'd-none'}" }
            =link_to('Create SOW Here (template)', 'https://docs.google.com/document/d/1XGBr8mitj6Ui4uTXiCZnevLx7F-5R0Ru0ZNkBLvXpWI/edit',
                     target: '_blank', rel: 'noopener noreferrer')
          :javascript
            function sowLinkSwitcher(check_box) {
              let sowLink = document.querySelector('.sow-link');
              let defaultSow = document.querySelector('.default-sow');

              if(check_box.checked) {
                sowLink.classList.add('d-none');
                defaultSow.classList.remove('d-none');
              } else {
                sowLink.classList.remove('d-none');
                defaultSow.classList.add('d-none');
              }
            }



    #projectOrderDetailsAnchor.mb-3
    #projectOrderDetails.card
      .card-body
        .font-weight-bold.mb-2
          Project Order Details (What do we need to do?)
          %span.small.text-danger
            *required
        =f.text_area "work_request[project_order_details]", class: 'form-control form-control-sm w-75',
                     value: @work_request.project_order_details.body&.gsub(/\\n/, '\n'), maxlength: 2000,
                     rows: @work_request.project_order_details.body&.count("\n") + 1, onkeypress: 'newLine(event, this);'
        .small.text-secondary
          limit: 2000 symbols


    :javascript
      function newLine(event, element) {
        if (event.keyCode === 13) {
          element.value = element.value + "\n";
          return false;
        } else {
          return true;
        }
      }


    #mostWorriedDetailsAnchor.mb-3
    #mostWorriedDetails.card
      .card-body
        .font-weight-bold.mb-2
          What are you most worried about us missing or not doing on this task?
        =f.text_area "work_request[most_worried_details]", class: 'form-control form-control-sm w-75',
                     value: @work_request.most_worried_details.body&.gsub(/\\n/, '\n'), maxlength: 2000,
                     rows: @work_request.most_worried_details.body&.count("\n") + 1, onkeypress: 'newLine(event, this);'
        .small.text-secondary
          limit: 2000 symbols



    -##budgetForProjectAnchor.mb-3
    -##budgetForProject.card
      .card-body
        .font-weight-bold.mb-2
          Budget for Project
        =f.text_field "work_request[budget_for_project]", class: 'form-control form-control-sm w-50',
                      value: @work_request.budget_for_project.body, maxlength: 2000



    -##invoiceTypeAnchor.mb-3
    -##invoiceType.card
      -it = @work_request.invoice_type
      .card-body
        .d-inline-block.font-weight-bold.mb-2
          Invoice Type
          %span.small.text-danger
            *required
        .types
          .row.mb-2.align-items-center{ class: "invoice-type-#{it.id}"}
            .col-1.text-right
              =f.radio_button "work_request[invoice_type]", it.id, checked: true
            .col-11.pl-0.text-left
              =f.label "work_request[invoice_type]", it.name, value: it.id, class: 'm-0'
        .row.loadingSpinner.d-none
          .col-1.text-right
            .spinner-border.spinner-border-sm.text-secondary
              %span.sr-only
        .other-types
          Other:
          %input.underline-input.w-50.p-0{ list: 'otherInvoiceTypes', onkeypress: 'invoiceTypeByEnterPress(event, this)' }
          %datalist#otherInvoiceTypes
            -InvoiceType.where("id != #{it.id}").each do |oit|
              %option{ value: "#{oit.name}" }
          .sign-in.d-inline-block.ml-1
            .mouse-hover{ onclick: 'invoiceTypeByArrowClick();' }
              =icon('fa', 'sign-in')
          .small.text-secondary
            *** other input: after typing or selecting press enter or click 'Enter' icon on right
      :javascript
        function invoiceTypeByEnterPress(event, input) {
          if(event.keyCode !== 13 || input.value.trim().length === 0) return false;

          postInvoiceTypeIfNotExist(input);
        }

        function invoiceTypeByArrowClick() {
          let input = document.querySelector('#invoiceType input.underline-input');

          if(input.value.trim().length === 0) return false;

          postInvoiceTypeIfNotExist(input);
        }

        function postInvoiceTypeIfNotExist(input) {
          let spinner = document.querySelector('#invoiceType .loadingSpinner');

          spinner.classList.remove('d-none');

          Rails.ajax({
            type: "POST",
            dataType: 'script',
            url: `#{find_or_create_api_invoice_types_path}`,
            data: `invoice_type[name]=${encodeURIComponent(input.value)}`,
            success: (data) => {
              input.value = '';
              spinner.classList.add('d-none');

              if(document.querySelector(`.invoice-type-${data['type_id']}`)) return false;

              document.querySelector('#invoiceType .types').insertAdjacentHTML(
                'beforeend',
                `<div class="row mb-2 align-items-center invoice-type-${data['type_id']}">
                  <div class="col-1 text-right">
                    <input type="radio" value="${data['type_id']}" name="work_request[invoice_type]" id="work_request[invoice_type]_${data['type_id']}" checked>
                  </div>
                  <div class="col-11 pl-0 text-left">
                    <label class="m-0" for="work_request[invoice_type]_${data['type_id']}" value="${data['type_id']}">${data['type_name']}</label>
                  </div>
                </div>`
              )
            }
          });
        }



    -##invoiceFrequencyAnchor.mb-3
    -##invoiceFrequency.card
      -ifr = @work_request.invoice_frequency
      .card-body
        .font-weight-bold.mb-2
          Invoice Frequency
          %span.small.text-danger
            *required
        .frequencies
          .row.mb-2.align-items-center{ class: "invoice-frequency-#{ifr.id}"}
            .col-1.text-right
              =f.radio_button "work_request[invoice_frequency]", ifr.id, checked: true
            .col-11.pl-0.text-left
              =f.label "work_request[invoice_frequency]", ifr.name, value: ifr.id, class: 'm-0'
        .row.loadingSpinner.d-none
          .col-1.text-right
            .spinner-border.spinner-border-sm.text-secondary
              %span.sr-only
        .other-frequencies
          Other:
          %input.underline-input.w-50.p-0{ list: 'otherInvoiceFrequencies', onkeypress: 'invoiceFrequencyByEnterPress(event, this)' }
          %datalist#otherInvoiceFrequencies
            -InvoiceFrequency.where("id != #{ifr.id}").each do |oifr|
              %option{ value: "#{oifr.name}" }
          .sign-in.d-inline-block.ml-1
            .mouse-hover{ onclick: 'invoiceFrequencyByArrowClick();' }
              =icon('fa', 'sign-in')
          .small.text-secondary
            *** other input: after typing or selecting press enter or click 'Enter' icon on right
      :javascript
        function invoiceFrequencyByEnterPress(event, input) {
          if(event.keyCode !== 13 || input.value.trim().length === 0) return false;

          postInvoiceFrequencyIfNotExist(input);
        }

        function invoiceFrequencyByArrowClick() {
          let input = document.querySelector('#invoiceFrequency input.underline-input');

          if(input.value.trim().length === 0) return false;

          postInvoiceFrequencyIfNotExist(input);
        }

        function postInvoiceFrequencyIfNotExist(input) {
          let spinner = document.querySelector('#invoiceFrequency .loadingSpinner');

          spinner.classList.remove('d-none');

          Rails.ajax({
            type: "POST",
            dataType: 'script',
            url: `#{find_or_create_api_invoice_frequencies_path}`,
            data: `frequency_type[name]=${encodeURIComponent(input.value)}`,
            success: (data) => {
              input.value = '';
              spinner.classList.add('d-none');

              if(document.querySelector(`.invoice-frequency-${data['frequency_id']}`)) return false;

              document.querySelector('#invoiceFrequency .frequencies').insertAdjacentHTML(
                'beforeend',
                `<div class="row mb-2 align-items-center invoice-frequency-${data['frequency_id']}">
                  <div class="col-1 text-right">
                    <input type="radio" value="${data['frequency_id']}" name="work_request[invoice_frequency]" id="work_request[invoice_frequency]_${data['frequency_id']}" checked>
                  </div>
                  <div class="col-11 pl-0 text-left">
                    <label class="m-0" for="work_request[invoice_frequency]_${data['frequency_id']}" value="${data['frequency_id']}">${data['frequency_name']}</label>
                  </div>
                </div>`
              )
            }
          });
        }



    -##firstInvoiceAnchor.mb-3
    -##firstInvoice.card
      .card-body
        .font-weight-bold.mb-2
          First Invoice Date
        =f.date_field "work_request[first_invoice]", class: 'form-control form-control-sm w-50',
                      value: @work_request.first_invoice


    -if current_account.types.include?('manager')
      #FinalInvoiceAnchor.mb-3
      #FinalInvoice.card
        .card-body
          .font-weight-bold.mb-2
            Final Invoice Date
          =f.date_field "work_request[final_invoice]",
                        class: 'form-control form-control-sm w-50',
                        value: @work_request.final_invoice



    #goalDeadlineAnchor.mb-3
    #goalDeadline.card
      .card-body
        .font-weight-bold.mb-2
          Goal deadline
        =f.date_field "work_request[goal_deadline]", class: 'form-control form-control-sm w-50',
                      value: @work_request.goal_deadline



    #finalDeadlineAnchor.mb-3
    #finalDeadline.card
      .card-body
        .font-weight-bold.mb-2
          Final deadline
        =f.date_field "work_request[final_deadline]", class: 'form-control form-control-sm w-50',
                      value: @work_request.final_deadline




    #priorityAnchor.mb-3
    #priority.card
      .card-body
        .font-weight-bold.mb-2
          Priority
          %span.small.text-danger
            *required
        .priorities
          -Priority.all.each do |pr|
            .row.mb-2.align-items-center{ class: "revenue-type-#{pr.id}"}
              .col-1.text-right
                =f.radio_button "work_request[priority]", pr.id, checked: @work_request.priority.eql?(pr)
              .col-11.pl-0.text-left
                =f.label "work_request[priority]", pr.name, value: pr.id, class: 'm-0'
  .d-none
    =f.submit id: 'hiddenUpdateButton'

  :javascript
    function onSubmit(event) {
      event.preventDefault();
      event.stopPropagation();

      // #workTypes,
      // #revenueTypes,
      // #clients,
      // #finalDeadline,
      // #budgetForProject,
      // #firstInvoice,
      // #invoiceType,
      // #invoiceFrequency,
      let sections = `#projectOrderName, #projectOrderDetails, #priority#{current_account.types.include?('manager') ? ', #sow' : ''}`
      let cards = document.querySelectorAll(sections);
      [...cards].forEach((el) => { el.classList.remove('border-danger') })

      // let workType = [...document.querySelectorAll('#workTypes input[type="checkbox"]')].some((el) => { return el.checked; } );
      // if(!workType) {
      //   scrollToCardUnblockButton('#workTypes')
      //   return false;
      // }

      // let client = [...document.querySelectorAll('#clients input[type="checkbox"]')].some((el) => { return el.checked; } );
      // if(!client) {
      //   scrollToCardUnblockButton('#clients')
      //   return false;
      // }

      // let revenueType = [...document.querySelectorAll('#revenueTypes input[type="checkbox"]')].some((el) => { return el.checked; } );
      // if(!revenueType) {
      //   scrollToCardUnblockButton('#revenueTypes')
      //   return false;
      // }

      let orderName = document.querySelector('#projectOrderName input').value.length > 0
      if(!orderName) {
        scrollToCardUnblockButton('#projectOrderName')
        return false;
      }

      if(#{raw(current_account.types.include?('manager'))}) {
        let sowCheckBox = document.querySelector('input[id="work_request[sow[default]]"]');
        let sowInput = document.querySelector('input[id="work_request[sow[link]]"]');
        if(!sowCheckBox.checked) {
          let sowPattern = sowInput.value.match(/^https:\/\/docs.google.com\/(document|spreadsheets)/)

          if(!sowPattern) {
            scrollToCardUnblockButton("#sow")
            return false;
          }
        }
      }

      let orderDetail = document.querySelector('#projectOrderDetails textarea').value.length > 0
      if(!orderDetail) {
        scrollToCardUnblockButton('#projectOrderDetails')
        return false;
      }

      // let budget = document.querySelector('#budgetForProject input').value.length > 0
      // if(!budget) {
      //   scrollToCardUnblockButton('#budgetForProject')
      //   return false;
      // }

      // let invoiceType = [...document.querySelectorAll('#invoiceType input[type="radio"]')].some((el) => { return el.checked; } );
      // if(!invoiceType) {
      //   scrollToCardUnblockButton('#invoiceType')
      //   return false;
      // }

      // let invoiceFrequency = [...document.querySelectorAll('#invoiceFrequency input[type="radio"]')].some((el) => { return el.checked; } );
      // if(!invoiceFrequency) {
      //   scrollToCardUnblockButton('#invoiceFrequency')
      //   return false;
      // }

      // let FirstInvoice = document.querySelector('#firstInvoice input').value.length > 0
      // if(!FirstInvoice) {
      //   scrollToCardUnblockButton('#firstInvoice')
      //   return false;
      // }

      // let finalDeadline = document.querySelector('#finalDeadline input').value.length > 0
      // if(!finalDeadline) {
      //   scrollToCardUnblockButton('#finalDeadline')
      //   return false;
      // }

      let priority = [...document.querySelectorAll('#priority input[type="radio"]')].some((el) => { return el.checked; } );
      if(!priority) {
        scrollToCardUnblockButton('#priority')
        return false;
      }

      event.target.removeEventListener('submit', onSubmit)
      Rails.fire(event.target, 'submit');
      document.querySelector('#updateWorkRequestModal form').addEventListener('submit', onSubmit)
    }

    document.querySelector('#updateWorkRequestModal').addEventListener('scroll', () => {
      document.querySelectorAll('input[list]').forEach(el => { el.blur();  })
    }, false)

    function scrollToCardUnblockButton(id) {
      console.log(id)
      let button = document.querySelector('#updateWorkRequestButton');
      let required = document.querySelector(id);

      button.classList.remove('disabled');
      button.innerText = 'update';
      required.addEventListener('animationend', (ev) => { ev.target.classList.remove('touch-required-field') })

      document.querySelector(id).classList.add('border-danger', 'touch-required-field')
      document.querySelector(`${id}Anchor`).scrollIntoView();
    }

    document.querySelector('#updateWorkRequestModal form').addEventListener('submit', onSubmit)
