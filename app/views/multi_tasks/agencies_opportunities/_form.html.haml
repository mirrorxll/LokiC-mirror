:javascript
  window.$(`#add_agency_#{raw task}`).on('click', (e)=> {
    e.preventDefault();

    let agencies = []

    let task = '#{raw task}'
    let uId = secureRandom(6)

    let task_id = 'multi_task'

    let agenciesSelect = document.createElement('select')
    agenciesSelect.appendChild(document.createElement('option'))
    agenciesSelect.id = `${task_id}[agencies_opportunities[${uId}[agency_id]]]`
    agenciesSelect.name = `${task_id}[agencies_opportunities[${uId}[agency_id]]]`
    agenciesSelect.className = `w-100 ${task}_agencies_select`
    agenciesSelect.task = `${task}`
    agenciesSelect.required = true
    agenciesSelect.addEventListener('change', opportunitiesByAgency)
    agenciesSelect.addEventListener('change', revenueTypesByOpportunity)

    let opportunitiesSelect = document.createElement('select')
    opportunitiesSelect.appendChild(document.createElement('option'))
    opportunitiesSelect.id = `${task_id}[agencies_opportunities[${uId}[opportunity_id]]]`
    opportunitiesSelect.name = `${task_id}[agencies_opportunities[${uId}[opportunity_id]]]`
    opportunitiesSelect.className = `w-100 ${task}_opportunities_select`
    opportunitiesSelect.task = `${task}`
    opportunitiesSelect.required = true
    opportunitiesSelect.addEventListener('change', revenueTypesByOpportunity)

    let revenueTypeSelect = document.createElement('select')
    revenueTypeSelect.appendChild(document.createElement('option'))
    revenueTypeSelect.id = `${task_id}[agencies_opportunities[${uId}[revenue_type_id]]]`
    revenueTypeSelect.name = `${task_id}[agencies_opportunities[${uId}[revenue_type_id]]]`
    revenueTypeSelect.task = `${task}`
    revenueTypeSelect.className = `w-100 ${task}_revenue_type_select`
    opportunitiesSelect.required = true

    let percentInput = document.createElement('input')
    percentInput.type = `number`
    percentInput.max = `100`
    percentInput.min = `1`
    percentInput.id = `${task_id}[agencies_opportunities[${uId}[percents]]]`
    percentInput.name = `${task_id}[agencies_opportunities[${uId}[percents]]]`
    percentInput.className = `small ${task}_percent_select agencies_percents`
    percentInput.required = true
    percentInput.placeholder = 'percents'

    let agenciesCol = document.createElement('div')
    agenciesCol.className = 'col-3'
    agenciesCol.appendChild(agenciesSelect)

    let revenueTypeCol = document.createElement('div')
    revenueTypeCol.className = 'col-3'
    revenueTypeCol.appendChild(revenueTypeSelect)

    let opportunitiesCol = document.createElement('div')
    opportunitiesCol.className = 'col-3'
    opportunitiesCol.appendChild(opportunitiesSelect)

    let percentCol = document.createElement('div')
    percentCol.className = 'col-1 pr-1 pl-1'
    percentCol.appendChild(percentInput)

    let x = document.createElement('strong')
    x.className = 'remove_x fa fa-minus'
    x.addEventListener('click', removeAgencyOpportunity )

    let removeCol = document.createElement('div')
    removeCol.className = 'col-1 my-auto remove_x'
    removeCol.appendChild(x)

    let row = document.createElement('div')
    row.className = 'row mb-1'
    row.id = uId
    row.appendChild(agenciesCol)
    row.appendChild(opportunitiesCol)
    row.appendChild(revenueTypeCol)
    row.appendChild(percentInput)
    row.appendChild(removeCol)

    document.getElementById(`agency_opportunity_revenue_types_${task}`).appendChild(row)

    if(agencies.length === 0) {
        window.$.ajax({
            url: `${window.location.origin}/api/main_agencies`,
            dataType: 'json',
            success: (agencies)=> { addAgenciesToSelectGroup(task, uId, agencies) }
        });
    } else {
        addAgenciesToSelectGroup(task, uId);
    }
  })

  function secureRandom(n){
      let result = '';
      while (n--){
          result += Math.floor(Math.random() * 16).toString(16);
      }
      return result;
  }

  function addAgenciesToSelectGroup(task, uId, agenciesFromApi = null) {
      if(agenciesFromApi != null) agencies = agenciesFromApi

      if(agencies.length > 0) {
          let select = document.getElementById(uId).getElementsByClassName(`${task}_agencies_select`)[0]
          let option = null;

          for (let i = 0; i < agencies.length; i++) {
              option = document.createElement("option");
              option.setAttribute("value", agencies[i].id);
              option.textContent = agencies[i].name;
              select.appendChild(option);
          }
      } else {
          setTimeout(addAgenciesToSelectGroup, 1000)
      }
  }

  function opportunitiesByAgency(event) {
      let task = event.target.task
      let agencyId = event.target.value;
      if(agencyId === '') return false;

      let opportunitiesSelect = event.target.parentNode.parentNode.getElementsByClassName(`${task}_opportunities_select`)[0]

      while (opportunitiesSelect.firstChild) {
          opportunitiesSelect.removeChild(opportunitiesSelect.firstChild);
      }

      window.$.ajax({
          url: `${window.location.origin}/api/main_agencies/${agencyId}/opportunities`,
          dataType: 'json',
          async: false,
          success: (opportunities) => {
              addOpportunitiesToSelectGroup(opportunitiesSelect, opportunities)
          }
      });
  }

  function addOpportunitiesToSelectGroup(opportunitiesSelect, opportunities) {
      let option = null;

      for (let i = 0; i < opportunities.length; i++) {
          option = document.createElement("option");
          option.setAttribute("value", opportunities[i].id);
          option.textContent = opportunities[i].name;
          opportunitiesSelect.appendChild(option);
      }
  }

  function revenueTypesByOpportunity(event) {
      let task = event.target.task
      let opportunityId = event.target.parentNode.parentNode.getElementsByClassName(`${task}_opportunities_select`)[0].value;
      let agencyId = event.target.parentNode.parentNode.getElementsByClassName(`${task}_agencies_select`)[0].value;

      if(agencyId === '') return false;
      if(opportunityId === '') return false;

      let revenueTypesSelect = event.target.parentNode.parentNode.getElementsByClassName(`${task}_revenue_type_select`)[0]

      while (revenueTypesSelect.firstChild) {
          revenueTypesSelect.removeChild(revenueTypesSelect.firstChild);
      }

      window.$.ajax({
          url: `${window.location.origin}/api/main_opportunities/${opportunityId}/revenue_types`,
          dataType: 'json',
          success: (revenueTypes)=> { addRevenueTypesToSelectGroup(revenueTypesSelect, revenueTypes) }
      });
  }

  function addRevenueTypesToSelectGroup(revenueTypesSelect, revenueTypes) {
      let option = null;

      for (let i = 0; i < revenueTypes.length; i++) {
          option = document.createElement("option");
          option.setAttribute("value", revenueTypes[i].id);
          option.textContent = revenueTypes[i].name;
          revenueTypesSelect.appendChild(option);
      }
  }

  function removeAgencyOpportunity(e) {
    e.target.parentNode.parentNode.remove();
    let percentInputs = document.getElementsByClassName('agencies_percents');
    let percentFeedback = document.querySelector('#agenciesPercentsFeedback');

    for (let i = 0; i < percentInputs.length; i++) {
      percentInputs[i].classList.remove('border', 'border-danger');
    }
    percentFeedback.classList.add('d-none');

  }
