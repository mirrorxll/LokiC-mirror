=form_with(url: multi_tasks_path, id: 'newMultiTaskParent',  html: { onkeypress: "return event.keyCode !== 13;" }, class: 'p-3', subtaskCount: 0 ) do |form|
  =hidden_field_tag 'multi_task_parent[work_request]', @work_request.id
  .row.small.col
    .form-group
      =form.text_field 'multi_task_parent[title]', placeholder: 'title', id: 'newTaskNameParent', class: 'form-control form-control-sm', required: true, maxlength: 500, value: @work_request.project_order_name.nil? ? '' : @work_request.project_order_name.body
      #newTaskNameParentFeedback.text-danger.text-center.d-none
        MultiTask with this title already created by you. Let's use something else
  .row.small.font-weight-bold
    .col-4.border-right
      .row.justify-content-between
        .col
          assignment to:
        .col
          .row.mt-1.small
            =form.collection_select 'multi_task_parent[assignment_to]', Account.ordered, :id, :name, { prompt: '' }, style: "width:130px"
      %hr
      .row.justify-content-between.mt-1
        .col
          assistants:
          =icon('fa', 'plus', class: 'ml-2', id: 'addAssistantParent')
        .col#assistantsParentForm
      %hr
      .row.justify-content-between
        .col
          notifications to:
          =icon('fa', 'plus', class: 'ml-2', id: 'addNotificationsToParent')
        .col#notificationsToParentForm
    .col-8
      .row
        .col-6
          .row.mb-2
            .col
              reminder frequency:
            .col.text-left.small
              =form.collection_select 'multi_task_parent[reminder_frequency]', sorted_reminder_frequencies, :id, :name, { prompt: '' }
          .row.mb-2
            .col
              client:
            .col.text-left.small
              =form.collection_select 'multi_task_parent[client_id]', ClientsReport.all.order(:name), :id, :name, { prompt: '' }, style: "width:150px"
          .row.mb-2.font-weight-normal
            .col
              =link_to('[ checklists ]', nil, onclick: "showChecklistsParent(event)")
            .col.text-left
        .col-6
          .row.mb-2
            .col.text-right
              deadline:
            .col.text-left.small
              =form.date_field 'multi_task_parent[deadline]', type: :datetime
          :javascript
            $('input[id="multi_task_parent[deadline]"]').datepicker({
              format: 'yyyy-mm-dd'
            });
          .row.mb-2
            .col.text-right
              access to task and its subtasks:
            .col.text-left
              =form.check_box 'multi_task_parent[access]', class: 'form-check-input ml-0 mt-2', checked: true
      %hr
      .row.font-weight-bold
        .col
          .row.mb-2.mt-2
            .col-3
              sow:
            .col.small
              =form.text_field 'multi_task_parent[sow]', placeholder: 'link to google sheet', maxlength: 255, class: 'w-100', value: @work_request.sow.nil? ? '' : @work_request.sow
          .row.mb-2
            .col-3
              pivotal tracker:
            .col.small
              =form.text_field 'multi_task_parent[pivotal_tracker_name]', placeholder: 'name', maxlength: 255, class: 'w-100'
          .row.mb-2
            .col-3
              pivotal tracker link:
            .col.small
              =form.text_field 'multi_task_parent[pivotal_tracker_url]', placeholder: 'link', maxlength: 255, class: 'w-100'
  %hr
  .row.small
    .col.font-weight-normal.mb-2
      =link_to '[ add agency/opportunity/revenue_type ]', '#' , class: 'add_agency', id: 'add_agency_task_parent'
  .row.small
    .col
      #agency_opportunity_revenue_types_task_parent.small
      #agenciesPercentsFeedback.text-danger.text-center.font-weight-normal.d-none
        Total of percents must be 100

    #checklistsParent.accordion.mt-2.d-none
      .card.small
        .card-header.p-1
          %div.row
            .col-1
              =icon('fa', 'plus', id: 'addÐ¡hecklistParent')
            .col-11.text-right
              %div{"aria-controls" => "#checklistsParentCollapse", "aria-expanded" => "true", "data-target" => "#checklistsParentCollapse", "data-toggle" => "collapse", type: "button"}
                checklists
        #checklistsParentCollapse.collapse{"data-parent" => "#checklistsParent", class: 'show'}
          .row.mt-2.mb-2
            .col#forms_checklists_parent
  .row.small.mt-2
    .form-group
      =form.text_area 'multi_task_parent[description]', id: 'task_description'

  #formsSubtasks.accordion.justify-content-center

  .row.col.small.font-weight-bold.justify-content-center.mb-2.mt-2
    =link_to '[ add subtask ]', nil, onclick: 'addSubtask(event);'

    =form.submit :create, id: 'hiddenCreateMultiTaskButton', class: 'd-none'

=render 'multi_tasks/agencies_opportunities/form', task: 'task_parent'

:javascript
  $('#task_description').froalaEditor({
      key: 'KfdolbcqsaA2wzA-13==',
      toolbarButtons: ['fullscreen', 'undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', '|', 'fontFamily', 'fontSize', 'color', 'inlineClass', 'inlineStyle', 'paragraphStyle', 'lineHeight', '|', 'paragraphFormat', 'align', 'formatOL', 'formatUL', 'outdent', 'indent', 'quote', 'insertLink', 'insertImage', 'insertTable', '|', 'emoticons', 'specialCharacters', 'insertHR', 'selectAll', 'clearFormatting', '|', 'print', 'getPDF', 'help', 'html'],
      imageUploadURL: '/images/upload',
      imageUploadMethod: 'POST',
      height: 300
  });

  var accounts = #{raw Account.ordered.map{ |a| [a.name, a.id]} };
  var current_account_id = #{raw current_account.id}

  function addSubtask(e) {
    e.preventDefault();

    let newMultiTaskParent = document.getElementById('newMultiTaskParent')
    let countSubtask = newMultiTaskParent.getAttribute('subtaskCount');
    let newCountSubtask = Number(countSubtask) + 1;
    newMultiTaskParent.setAttribute('subtaskCount', newCountSubtask)

    Rails.ajax({
        type: "GET",
        dataType: 'script',
        url: `#{add_subtask_multi_tasks_path}`,
        data: `number_subtask=${newCountSubtask}`
    })

  }

  $('#addNotificationsToParent').click(function () {
    let hex = secureRandom(6);

    $('#notificationsToParentForm').append(
        `<div id="assistant_${hex}" class="row small mt-1 mb-1" >
           <select id="multi_task_parent[notification_to][]" style = "width:130px" class="mr-1" name="multi_task_parent[notification_to][]">${buildSelect(accounts)}</select>
           <div class="ml-1" id="rm_assistant_${hex}" onclick="removeDate(this)"><i class="fa fa-minus"></i></div>
         </div>`
    );
  });

  $('#addAssistantParent').click(function () {
    let hex = secureRandom(6);

    $('#assistantsParentForm').append(
        `<div id="assistant_${hex}" class="row small mt-1 mb-1" >
           <select id="multi_task_parent[assistants][]" style = "width:130px" class="mr-1" name="multi_task_parent[assistants][]">${buildSelect(accounts)}</select>
           <div class="ml-1" id="rm_assistant_${hex}" onclick="removeDate(this)"><i class="fa fa-minus"></i></div>
         </div>`
    );
  });

  $('#deleteParentAssistant').click(function () {
    let assignments = document.getElementById('assistantsParent')
    assignments.removeChild(assignments.lastChild)
  });

  function buildSelect(options) {
    var $select = $('');
    $select += ('<option value="' + '' + '">' + '' + '</option>');
    for (var i = 0; i < options.length; i++) {
      $select += ('<option value="' + options[i][1] + '">' + options[i][0] + '</option>');
    }
    return $select;
  }

  function removeDate(elem) {
    $(elem.parentNode).remove();
  }

  function secureRandom(n) {
    let result = '';
    while (n--){
      result += Math.floor(Math.random() * 16).toString(16);
    }
    return result;
  }

  $('#task').on('hidden.bs.modal', function () {
    $('#task .modal-body').empty();
  });

  function delay(fn, ms) {
    let timer = 0;
    return function(...args) {
      clearTimeout(timer);
      timer = setTimeout(fn.bind(this, ...args), ms || 0)
    }
  }

  function isUniq(name, names) {
    let lowName = name.toLowerCase();
    return !names.find(el => lowName === el.toLowerCase());
  }

  document.querySelector('#newMultiTaskParent').addEventListener('input', delay(() => {
    let percentInputs = document.getElementsByClassName('agencies_percents');
    let percentFeedback = document.querySelector('#agenciesPercentsFeedback');

    for (let i = 0; i < percentInputs.length; i++) {
      percentInputs[i].classList.remove('border', 'border-danger');
    }
    percentFeedback.classList.add('d-none');

    Rails.ajax({
      type: 'GET',
      dataType: 'json',
      url: `/api/multi_tasks/titles`,
      data: `creator_id=${current_account_id}`,
      success: (names) => {
        let nameInput = document.querySelector('#newTaskNameParent');
        let nameFeedback = document.querySelector('#newTaskNameParentFeedback');
        let submitButton = document.querySelector('#newMultiTaskParent input[type="submit"]');
        let nameIsUniq = isUniq(nameInput.value, names);

        if(nameIsUniq === true) {
          nameInput.classList.remove('border', 'border-danger');
          nameFeedback.classList.add('d-none');
          submitButton.disabled = false;
        } else {
          nameInput.classList.add('border', 'border-danger');
          nameFeedback.classList.remove('d-none');
          submitButton.disabled = true;
        }
      }
    })
  }, 500));

  function onSubmit(ev) {
    ev.preventDefault();
    ev.stopPropagation();

    let form = ev.target;
    let nameInput = form.querySelector('#newTaskNameParent');
    let nameFeedback = form.querySelector('#newTaskNameParentFeedback');
    let submitButton = form.querySelector('#newMultiTaskParent input[type="submit"]');

  let percentInputs = document.getElementsByClassName('agencies_percents');
    let percentFeedback = document.querySelector('#agenciesPercentsFeedback');

    let sum = 0;
    for (var i = 0; i < percentInputs.length; i++) {
      sum += parseFloat(percentInputs[i].value)
    }

    if(Math.round(sum) === 100 || percentInputs.length === 0) {
    }
    else
    {
      for (let i = 0; i < percentInputs.length; i++) {
        percentInputs[i].classList.add('border', 'border-danger');
      }
      percentFeedback.classList.remove('d-none');
      return;
    }

    Rails.ajax({
      type: 'GET',
      dataType: 'json',
      url: `/api/multi_tasks/titles`,
      data: `creator_id=${current_account_id}`,
      success: (names) => {
        let nameIsUniq = isUniq(nameInput.value, names);

        if(nameIsUniq) {
          form.removeEventListener('submit', onSubmit)
          Rails.fire(form, 'submit')
        } else {
          nameInput.classList.add('border', 'border-danger');
          nameFeedback.classList.remove('d-none');
          submitButton.disabled = true;
        }
      }
    })
  }
  document.querySelector('#newMultiTaskParent').addEventListener('submit', onSubmit)

  $('#addÐ¡hecklistParent').click(function () {
    let hex = secureRandom(6);

    $('#forms_checklists_parent').append(
        `<div id="checklist_${hex}" class="row small justify-content-center mt-2">
           <div class="small mt-1 mr-2"><i class="fa fa-circle"></i></div>
           <input id="multi_task_parent[checklists][]" style='width: 90%' required=required maxlength="255" name="multi_task_parent[checklists][]"></input>
           <div class="ml-2" id="rm_checklist_${hex}" onclick="removeDate(this)"><i class="fa fa-minus"></i></div>
         </div>`
    );
  });

  function showChecklistsParent(e) {
    e.preventDefault();

    let divChecklists = document.querySelector(`#checklistsParent`);

    if(divChecklists.classList.contains('d-none')){
      divChecklists.classList.remove('d-none');
    } else {
     divChecklists.classList.add('d-none');
    }
  };

