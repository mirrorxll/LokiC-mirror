count of stories:
=@iteration.schedule_counts[:total]
%br/
stories sheduled:
=@iteration.samples.where.not(published_at: nil).where(backdated: 0).count
%br/
stories backdated:
=@iteration.samples.where(backdated: 1).count
%hr/
-@iteration.schedule_counts.except(:total).each do |client, count|
  ="#{client}: #{count}"
  %br/
-if @iteration.samples.where.not(published_at: nil).count > 1 && @iteration.export.nil?
  -if @story_type.iteration.eql?(@iteration)
    =link_to('purge schedule',
             purge_story_type_iteration_schedules_path(@story_type, @iteration),
             id: 'purge_schedule', class: 'mt-3 btn btn-sm btn-outline-dark',
             method: :patch, remote: true)
