.col-12
  .d-inline.ml-3.mb-2.text-info
    ***if you update columns list, will drop 'story per publication' index and you will need to recreate it.
  .ml-3
    =form_with(model: [@story_type, @staging_table, @staging_table.columns], method: :put) do |form|
      #add_column.mb-2
        =icon('fas', 'plus')
      .row
        .col-8#columns_editable
          -@staging_table.columns.list.each do |hex, column|
            %div{ id: "col_#{hex}", class: 'mb-1' }
              %div.remove_column.d-inline-block.mr-1{ id: "rm_col_#{hex}", onclick: 'removeColumn(this)' }
                =icon('fas', 'minus')
              =form.text_field "#{hex}[name]",
                               { value: column[:name], placeholder: 'name', id: "columns_#{hex}_name" }
              =form.select "#{hex}[type]", options_for_select(data_types, column[:type]), {},
                           { class: 'h_25px', id: "columns_#{hex}_type", onchange: 'optionsForColumnType(this)' }
              .d-inline-block
                -if %i[string text integer float].include?(column[:type])
                  =form.text_field "#{hex}[options[limit]]", { class: 'w_80px', value: column[:options][:limit], placeholder: 'limit', id: "columns_#{hex}_params_limit", onclick: 'showInfo(this);' }
                -elsif %i[decimal datetime time].include?(column[:type])
                  =form.text_field "#{hex}[options[precision]]", { class: 'w_80px', value: column[:options][:precision], placeholder: 'precision', id: "columns_#{hex}_params_precision", onclick: 'showInfo(this);' }
                -if column[:type].eql?(:decimal)
                  =form.text_field "#{hex}[options[scale]]", { class: 'w_80px', value: column[:options][:scale], placeholder: 'scale', id: "columns_#{hex}_params_scale", onclick: 'showInfo(this);' }
          =form.submit :update, class: 'mt-3 ml-3'
          =link_to('cancel', section_story_type_staging_tables_path(@story_type), class: 'ml-3', remote: true)

        .col-4#column_info.border-left



:javascript
  var submit = $('#columns_editable input[type="submit"]')[0];
  $('#add_column').click(function () {
    let hex = secureRandom(6);

    $(submit).before(
        `<div id="col_${hex}" class="mb-1">
            <div class=" remove_column d-inline-block mr-1" id="rm_col_${hex}" onclick="removeColumn(this)"><i class="fas fa-minus"></i></div>
            <input placeholder="name" id="columns_${hex}_name" required="required" type="text" name="columns[${hex}[name]]">
            <select class="h_25px" id="columns_${hex}_type" onchange="optionsForColumnType(this)" name="columns[${hex}[type]]">
                <option selected="selected" value="string">string</option>
                <option value="text">text</option>
                <option value="integer">integer</option>
                <option value="float">float</option>
                <option value="decimal">decimal</option>
                <option value="datetime">datetime</option>
                <option value="timestamp">timestamp</option>
                <option value="time">time</option>
                <option value="date">date</option>
                <option value="boolean">boolean</option></select>
            </select>
            <div class="d-inline-block">
                <input class="w_80px" placeholder="limit" onclick="showInfo(this);"
                       id="columns_${hex}_params_limit" type="text"
                       name="columns[${hex}[options[limit]]]">
            </div>
        </div>`
    );
  });

  function secureRandom(n){
    let result = '';
    while (n--){
      result += Math.floor(Math.random()*16).toString(16);
    }

    return result;
  }

  function removeColumn(elem) {
    $(elem.parentNode).remove();
  }

  function optionsForColumnType(elem) {
    let parent = elem.parentNode;
    let hex = parent.id.split('_')[1]
    while (parent.childElementCount > 3)
      $(elem).next().remove();

    switch (elem.options[elem.selectedIndex].value) {
      case 'string':
      case 'text':
      case 'integer':
      case 'float':
        $(parent).append(`
          <div class="d-inline-block">
            <input class="w_80px" placeholder="limit" type="text" onclick="showInfo(this);"
              name="columns[${hex}[options[limit]]]" id="columns_${hex}_params_limit">
          </div>
        `);
        break;
      case 'decimal':
        $(parent).append(`
          <div class="d-inline-block">
            <input class="w_80px" placeholder="precision" type="text" onclick="showInfo(this);"
              name="columns[${hex}[options[precision]]]" id="columns_${hex}_params_precision">
            <input class="w_80px" placeholder="scale" type="text" onclick="showInfo(this);"
              name="columns[${hex}[options[scale]]]" id="columns_${hex}_params_scale">
          </div>
        `);
        break;
      case 'datetime':
      case 'time':
        $(parent).append(`
          <div class="d-inline-block">
            <input class="w_80px" placeholder="precision" type="text" onclick="showInfo(this);"
              name="columns[${hex}[options[precision]]]" id="columns_${hex}_params_precision">
          </div>
        `);

        break;
    }
  }

  function showInfo(elem) {
    let info = ''
    let select = elem.parentNode.parentNode.querySelector("select")
    let selected = select.options[select.selectedIndex].value

    switch (selected) {
      case 'string':
        info = '<b>string</b></br>' +
               'Usual SQL varchar. Limit can set between 1 and 3000.</br>' +
               'if you leave the field empty it will be set to 255.'
        break;
      case 'text':
        info = '<b>text</b></br>' +
               'limit values:</br>' +
               '256 - tinytext</br>' +
               '65535 - text</br>' +
               '16777215 - mediumtext</br>' +
               '4294967295 - longtext</br>' +
               'if you leave the field empty it will be set to 65535.'
        break;
      case 'integer':
        info = '<b>integer</b></br>' +
               'limit values:</br>' +
               '1 - tinyint</br>' +
               '2 - smallint</br>' +
               '3 - mediumint</br>' +
               '4 - int</br>' +
               '5 - bigint</br>' +
               '8 - bigint</br>' +
               '11 - int</br>' +
               'if you leave the field empty it will be set to 11'
        break;
      case 'float':
        info = '<b>float</b></br>' +
               'limit value is 24.'
        break;
      case 'decimal':
        info = '<b>decimal</b></br>' +
               'precision - the total number of digits in a decimal number, both before and after the decimal point.</br>' +
               'scale - The total number of digits after the decimal point in a number.'
        break;
      case 'time':
      case 'datetime':
        info = '<b>datetime/time</b></br>' +
               'The time/datetime precision specifies number of digits after the decimal point and can be any integer number from 0 to 6.'
        break;
      case 'timestamp':
      case 'date':
      case 'boolean':
        break;
    }

    document.getElementById('column_info').innerHTML = info
  }
