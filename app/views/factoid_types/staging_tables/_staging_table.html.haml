-if @factoid_type.staging_table_attached.eql?(false)
  =render 'factoid_types/main/spinner', description: 'staging table attaching in progress'
-elsif @factoid_type.staging_table_attached.nil?
  =render 'factoid_types/staging_tables/form'
-elsif @factoid_type.staging_table.columns_modifying.eql?(true)
  =render 'factoid_types/main/spinner', description: 'staging table modifying in progress'
-elsif @factoid_type.staging_table.indices_modifying.eql?(true)
  =render 'factoid_types/main/spinner', description: 'staging table modifying in progress'
-elsif @iteration.population.eql?(false)
  =render 'factoid_types/main/spinner', description: 'population in progress'
-else
  -staging_table = @factoid_type.staging_table
  -columns = staging_table.columns.list
  -uniq_index = staging_table.index.list

  .row.border-top.mt-3.ml-0.mr-0.pt-3
    .col-10.offset-1
      #staging_table_name
        .row.mb-1.font-weight-bold
          .col-12
            %p #{staging_table.name}

    -if @iteration.eql?(@factoid_type.iteration)
      .col-10.offset-1.align-items-center
        .row
          #sync.col-3
            .btn-group
              =link_to('sync', sync_factoid_type_staging_table_path(@factoid_type, staging_table),
                        class: 'btn btn-sm btn-outline-dark', method: :patch, remote: true)
          #exec_population.col-9.text-right
            =render 'factoid_types/populations/form'
  #columns__index.row.border-top.mt-3.ml-0.mr-0.pt-3
    =render 'factoid_types/staging_tables/columns_and_index', staging_table: staging_table,
                                                              columns: columns

  .row.border-top.ml-0.mr-0.pt-3.align-items-end
    .col-10.offset-1
      .row
        .col-6
          %p factoid uniq index: #{'index is empty or not set' unless uniq_index.present?}
        .col-6
          -uniq_index.each do |index|
            =index
            %br/
