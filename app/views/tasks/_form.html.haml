=form_with(url: tasks_path, id: 'form_new_task') do |form|
  .row.small
    .col
      .form-group
        =form.text_field 'task[title]', placeholder: 'title', id: 'newTaskName', class: 'form-control form-control-sm', required: true, maxlength: 500
        #newTaskNameFeedback.text-danger.text-center.d-none
          Task with this title already created by you. Let's use something else
      .form-group
        =form.text_area 'task[description]', class: 'form-control', id: 'task_description'
      .form-group
        =form.hidden_field 'task[parent]', value: params[:parent_task]
  %hr/
  .form-group.row.small.font-weight-bold.text-center.justify-content-between
    .col
      assignment to:
      =icon('fa', 'plus', class: 'ml-2', id: 'add_assignment')
      #assignments_form
        .row.mt-1.justify-content-center
          =form.collection_select 'task[assignment_to][]', current_account.types.include?('developer') ? [current_account] : Account.all.order([:first_name, :last_name]), :id, :name, { prompt: '' }
    .col
      reminder frequency:
      .mt-1.mw-50
        =form.collection_select 'task[reminder_frequency]', sorted_reminder_frequencies, :id, :name, { prompt: '' }
    .col
      client:
      .mt-1
        =form.collection_select 'task[client_id]', ClientsReport.all.order(:name), :id, :name, { prompt: '' }, style: "width:150px"
    .col
      main task:
      .mt-1
        =form.collection_select 'task[parent_task_id]', Task.all.order(:title), :id, :title, { prompt: '' }, style: "width:150px"
  .form-group.row.small.font-weight-bold.text-center.justify-content-between
    .col
    .col.text-center
      deadline:
      .mt-1
        =form.date_field 'task[deadline]'
    .col
      gather_task:
      .mt-1
        =form.text_field 'task[gather_task]', class: 'w-70'

  %hr/
  .modal-footer.justify-content-center
    =form.submit :create, class: 'btn btn-sm btn-outline-success'

:javascript
  var accounts = #{raw Account.all.order([:first_name, :last_name]).map{ |account| [account.first_name.to_s + ' ' + account.last_name.to_s, account.id]} };
  var current_account_id = #{raw current_account.id}

  $('#add_assignment').click(function () {
    let hex = secureRandom(6);

    $('#assignments_form').append(
        `<div id="assignment_${hex}" class="row mt-1 ml-1 justify-content-center">
           <select id="task[assignment_to][]" class="mr-1" name="task[assignment_to][]">${buildSelect(accounts)}</select>
           <div class="ml-1" id="rm_assignment_${hex}" onclick="removeDate(this)"><i class="fa fa-minus"></i></div>
         </div>`
    );
  });

  $('#delete_assignment').click(function () {
    let assignments = document.getElementById('assignments')
    assignments.removeChild(assignments.lastChild)
  });

  function buildSelect(options) {
    var $select = $('');
    $select += ('<option value="' + '' + '">' + '' + '</option>');
    for (var i = 0; i < options.length; i++) {
      $select += ('<option value="' + options[i][1] + '">' + options[i][0] + '</option>');
    }
    return $select;
  }

  function removeDate(elem) {
    $(elem.parentNode).remove();
  }

  function secureRandom(n){
    let result = '';
    while (n--){
      result += Math.floor(Math.random() * 16).toString(16);
    }
    return result;
  }

  $('#task').on('hidden.bs.modal', function () {
    $('#task .modal-body').empty();
  });

  function delay(fn, ms) {
    let timer = 0;
    return function(...args) {
      clearTimeout(timer);
      timer = setTimeout(fn.bind(this, ...args), ms || 0)
    }
  }

  function isUniq(name, names) {
    let lowName = name.toLowerCase();
    return !names.find(el => lowName === el.toLowerCase());
  }

  document.querySelector('#newTaskName').addEventListener('input', delay(() => {
    Rails.ajax({
      type: 'GET',
      dataType: 'json',
      url: `#{root_url}api/tasks/titles`,
      data: `creator_id=${current_account_id}`,
      success: (names) => {
        let nameInput = document.querySelector('#newTaskName');
        let nameFeedback = document.querySelector('#newTaskNameFeedback');
        let submitButton = document.querySelector('#form_new_task input[type="submit"]');
        let nameIsUniq = isUniq(nameInput.value, names);

        if(nameIsUniq === true) {
          nameInput.classList.remove('border', 'border-danger');
          nameFeedback.classList.add('d-none');
          submitButton.disabled = false;
        } else {
          nameInput.classList.add('border', 'border-danger');
          nameFeedback.classList.remove('d-none');
          submitButton.disabled = true;
        }
      }
    })
  }, 500));

  function onSubmit(ev) {
    ev.preventDefault();
    ev.stopPropagation();

    let form = ev.target;
    let nameInput = form.querySelector('#newTaskName');
    let nameFeedback = form.querySelector('#newTaskNameFeedback');
    let submitButton = form.querySelector('input[type="submit"]');

    Rails.ajax({
      type: 'GET',
      dataType: 'json',
      url: `#{root_url}api/tasks/titles`,
      data: `creator_id=${current_account_id}`,
      success: (names) => {
        let nameIsUniq = isUniq(nameInput.value, names);

        if(nameIsUniq) {
          form.removeEventListener('submit', onSubmit)
          Rails.fire(form, 'submit')
        } else {
          nameInput.classList.add('border', 'border-danger');
          nameFeedback.classList.remove('d-none');
          submitButton.disabled = true;
        }
      }
    })
  }
  document.querySelector('#form_new_task').addEventListener('submit', onSubmit)
